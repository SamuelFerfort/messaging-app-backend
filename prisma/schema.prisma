// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  password String
  sentMessages Message[] @relation("SentMessages")
  ReceivedMessages Message[] @relation("ReceivedMessages")
  avatar String?
  about String?
  chats Chat[] @relation("UserChats")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  isOnline Boolean @default(false)
  lastSeen DateTime @default(now())
}

model Chat {
  id String @id @default(uuid())
  name String?
  isGroup Boolean @default(false)
  users User[] @relation("UserChats")
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastMessageAt DateTime @default(now())
}


model Message {
  id String @id @default(uuid())
  content String
  timestamp DateTime @default(now())
  senderId String
  sender User @relation("SentMessages",references: [id], fields: [senderId])
  receiverId String
  receiver User @relation("ReceivedMessages",references: [id], fields: [receiverId])
  updatedAt DateTime @updatedAt
  read Boolean
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  type MessageType @default(TEXT)
}


enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}